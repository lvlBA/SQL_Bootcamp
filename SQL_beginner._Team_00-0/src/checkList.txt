Exercise 00
Checks for the exercise 00
- The next command provides a DDL for table creation and further INSERTs

        create table nodes
        ( point1 varchar,
       point2 varchar,
       cost numeric);

        insert into nodes values ('a','b',10);
        insert into nodes values ('b','a',10);

        insert into nodes values ('b','c',35);
        insert into nodes values ('c','b',35);

        insert into nodes values ('c','a',15);
        insert into nodes values ('a','c',15);

        insert into nodes values ('c','d',30);
        insert into nodes values ('d','c',30);

        insert into nodes values ('a','d',20);
        insert into nodes values ('d','a',20);

        insert into nodes values ('b','d',25);
        insert into nodes values ('d','b',25);


- The next command solves classical TSP
      
        with t as (
        with recursive _n as
        (select point1,
                point2,
                cost,
                1 as level,
                array[point1] AS path,
                FALSE AS cycle,
                array[cost] AS costs
        from nodes
        where point1 = 'a'
        union all
        select nodes.point1,
                nodes.point2,
                nodes.cost+_n.cost as cost,
                _n.level+1 as level,
                _n.path || nodes.point1 AS path,
                nodes.point1 = ANY (_n.path) AS cycle,
                _n.costs || nodes.cost AS costs
        from nodes inner join _n on _n.point2 = nodes.point1 and not cycle
        )
        select
            cost - costs[5] as total_cost,
            path as tour
        from _n
        where level =5 and
            'a' = ANY(path) and
            'b' = ANY(path) and
            'c' = ANY(path) and
            'd' = ANY(path)
           and path[1] = path[5]
        order by cost, path)
        select distinct *
        from t
        where total_cost = (select  min(total_cost) from t)
        order by 1,2;

- The result is below

        "80"	"{a,b,d,c,a}"
        "80"	"{a,c,d,b,a}"



Exercise 01
Checks for the exercise 01
- The next command 

        with t as (
        with recursive _n as
        (select point1,
                point2,
                cost,
                1 as level,
                array[point1] AS path,
                FALSE AS cycle,
                array[cost] AS costs
        from nodes
        where point1 = 'a'
        union all
        select nodes.point1,
                nodes.point2,
                nodes.cost+_n.cost as cost,
                _n.level+1 as level,
                _n.path || nodes.point1 AS path,
                nodes.point1 = ANY (_n.path) AS cycle,
               _n.costs || nodes.cost AS costs
        from nodes inner join _n on _n.point2 = nodes.point1 and not cycle
        )
        select
            cost - costs[5] as total_cost,
            path as tour
        from _n
        where level =5 and
            'a' = ANY(path) and
            'b' = ANY(path) and
            'c' = ANY(path) and
            'd' = ANY(path)
            and path[1] = path[5]
        order by cost, path)
        select distinct *
        from t
        where total_cost = (select  min(total_cost) from t) or
            total_cost = (select  max(total_cost) from t)
        order by 1,2;

- The result is below

        "80"	"{a,b,d,c,a}"
        "80"	"{a,c,d,b,a}"
        "95"	"{a,b,c,d,a}"
        "95"	"{a,c,b,d,a}"
        "95"	"{a,d,b,c,a}"
        "95"	"{a,d,c,b,a}"
